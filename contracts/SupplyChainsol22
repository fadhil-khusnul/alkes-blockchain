// SPDX-License-Identifier: MIT

// pragma solidity >=0.6.6 <=0.8.23;
pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

import "./RawAlkes.sol";


contract SupplyChain {
    address Owner;

    constructor()  {
        Owner = msg.sender;
    }

    modifier onlyOwner() {
        require(Owner == msg.sender);
        _;
    }

    modifier checkUser(address addr) {
        require(addr == msg.sender);
        _;
    }

    enum roles {
        noRole,
        manufaktur,
        distributor,
        kemenkes,
        rumah_sakit,
        customer
        
    }

    //////////////// Events ////////////////////

    event UserRegister(address indexed _address, bytes32 name);
    event requestEvent(
        address distributor,
        address indexed manufaktur,
        address alkesAddr,
        uint indexed timestamp
    );

    event izinEvent(
        address distributor,
        address indexed kemenkes,
        address alkesAddr,
        uint indexed timestamp
    );
   
    event rsEvent(
        address rs,
        address indexed distributor,
        address alkesAddr,
        uint indexed timestamp
    );
   

    //////////////// Event functions (All entities) ////////////////////

    function requestProduct(
        address distributor,
        address manufaktur,
        address packageAddr
    ) public {
        emit requestEvent(distributor, manufaktur, packageAddr, block.timestamp);
    }

    function izinRequest(
        address distributor,
        address kemenkes,
        address alkesAddr
    ) public {
        emit izinEvent(distributor, kemenkes, alkesAddr, block.timestamp);
    }

    function reqAlkesRs(
        address rs,
        address distributor,
        address alkesAddr
    ) public {
        emit rsEvent(rs, distributor, alkesAddr, block.timestamp);
    }

    

    /////////////// Users (Only Owner Executable) //////////////////////

    struct userData {
        bytes32 name;
        bytes32 email;
        bytes32 noTelp;
        roles role;
        address userAddr;
    }

    mapping(address => userData) public userInfo;

    function registerUser(
        bytes32 name,
        bytes32 email,
        bytes32 noTelp,
        uint role,
        address _userAddr
    ) public onlyOwner {
        userInfo[_userAddr].name = name;
        userInfo[_userAddr].email = email;
        userInfo[_userAddr].noTelp = noTelp;
        // userInfo[_userAddr].userLoc = loc;
        userInfo[_userAddr].role = roles(role);
        userInfo[_userAddr].userAddr = _userAddr;

        emit UserRegister(_userAddr, name);
    }

    function changeUserRole(
        uint _role,
        address _addr
    ) public onlyOwner returns (string memory) {
        userInfo[_addr].role = roles(_role);
        return "Role Updated!";
    }

    function getUserInfo(
        address _address
    ) public view returns (userData memory) {
        return userInfo[_address];
    }
    

    /////////////// Manufaktur //////////////////////

    mapping(address => address[]) public dataAlkesManufaktur;

    function createAlkesManufaktur(
       
        bytes32 _namaAlkes,
        bytes32 _deskripsiAlkes,
        bytes32 _klasifikasiAlkes,
        bytes32 _tipeAlkes,
        bytes32 _kelasAlkes,
        bytes32 _kelasResiko,
        bytes32 _noIzinEdar,
        address _distributorAddr,
        address _kemenkesAddr,
        address _rumahSakitAddr
     
    ) public returns (address) {
        RawAlkes alkes = new RawAlkes(
            msg.sender,
            address(bytes20(sha256(abi.encodePacked(msg.sender, block.timestamp)))),
            _namaAlkes,
            _deskripsiAlkes,
            _klasifikasiAlkes,
            _tipeAlkes,
            _kelasAlkes,
            _kelasResiko,
            _noIzinEdar,
            _distributorAddr,
            _kemenkesAddr,
            _rumahSakitAddr
        );

        dataAlkesManufaktur[msg.sender].push(address(alkes));
        return address(alkes);
    }

    function getNoOfPackagesOfSupplier() public view returns (uint) {
        return dataAlkesManufaktur[msg.sender].length;
    }

    function getAllPackages() public view returns (address[] memory) {
        uint len = dataAlkesManufaktur[msg.sender].length;
        address[] memory ret = new address[](len);
        for (uint i = 0; i < len; i++) {
            ret[i] = dataAlkesManufaktur[msg.sender][i];
        }
        return ret;
    }

      function getAllPackagesData()
        public
        view
        returns (address[] memory, bytes32[] memory, bytes32[] memory)
    {
        uint len = dataAlkesManufaktur[msg.sender].length;
        address[] memory retAddress = new address[](len);
        bytes32[] memory retDescription = new bytes32[](len);
        bytes32[] memory retKlasifikasi = new bytes32[](len);

        for (uint i = 0; i < len; i++) {
            address alkesAddr = dataAlkesManufaktur[msg.sender][i];
            RawAlkes alkesNew = RawAlkes(alkesAddr);

            // console.log(alkesNew);
            retAddress[i] = alkesAddr;
            retDescription[i] = alkesNew.getNamaAlkes();
            retKlasifikasi[i] = alkesNew.getKlasifikasiALkes();
        }

        return (retAddress, retDescription, retKlasifikasi);
    }
}
